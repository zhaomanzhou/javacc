/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(Paser)package assignment;
import java.io.FileInputStream;
import java.io.InputStream;

public class Paser{  public static void main(String args []) throws Exception  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    InputStream in = new FileInputStream("in.data");    Paser p = new Paser(in);    try    {      SimpleNode n = p.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(Paser)SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}




TOKEN : /*保留字*/

{
 < IF : "if">
| < ELSE : "else">
| < WHILE : "while">
| < VOID : "void">
| < INT : "int">
| < RETURN : "return">

}



TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? 
    >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
}



TOKEN : /*标识符 */
{
  <MAIN: "main" >
| < IDENTIFIER :
   < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
}


TOKEN : /*运算符*/

{
 < ADD : "+">
| < BIGGER : " >">
| < EQUAL : "=">
}



TOKEN : /*界符*/

{
 < MAOHAO : ",">
| < FENHAO : ";">
| < LEFTKH : "(">
| < RIGHTKH : ")">
| < LEFTHKH : "{">
| < RIGHTHKH : "}">
}

SimpleNode Start() :{}{  Program()  {    return jjtThis;  }}
void Program() :
{}
{
  (    <INT> <MAIN><LEFTKH ><RIGHTKH >
  < LEFTHKH > <RIGHTHKH >
	|<VOID> <MAIN><LEFTKH ><RIGHTKH >
  < LEFTHKH > <RIGHTHKH >
)
}
void Expression() :{}{  AdditiveExpression()}void AdditiveExpression() :{}{  MultiplicativeExpression()  (    (      "+"    | "-"    )    MultiplicativeExpression()  )*}void MultiplicativeExpression() :{}{  UnaryExpression()  (    (      "*"    | "/"    | "%"    )    UnaryExpression()  )*}void UnaryExpression() :{}{  "(" Expression() ")"| Identifier()| Integer()}void Identifier() :{}{  < IDENTIFIER >}void Integer() :{}{  < INTEGER_LITERAL >}
